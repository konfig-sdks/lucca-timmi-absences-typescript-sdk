/* tslint:disable */
/* eslint-disable */
/*
Timmi Absences API

Welcome on the documentation for Timmi Absences API.

The version of the OpenAPI document: 1.0
Contact: developers@lucca.fr

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LeaveRequestsApproveDenyRequest } from '../models';
// @ts-ignore
import { LeaveRequestsGetByIdResponse } from '../models';
// @ts-ignore
import { LeaveRequestsListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LeaveRequestsApi - axios parameter creator
 * @export
 */
export const LeaveRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Approve or deny a single Leave Request by its unique identifier  Only the Leave Requests pending approval can be approved or denied.  A comment is required to deny a Leave Request. 
         * @summary Approve or deny a leave request
         * @param {string} leaveRequestId 
         * @param {LeaveRequestsApproveDenyRequest} [leaveRequestsApproveDenyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveDeny: async (leaveRequestId: string, leaveRequestsApproveDenyRequest?: LeaveRequestsApproveDenyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaveRequestId' is not null or undefined
            assertParamExists('approveDeny', 'leaveRequestId', leaveRequestId)
            const localVarPath = `/api/v3/leaveRequests/{leaveRequestId}/approvals`
                .replace(`{${"leaveRequestId"}}`, encodeURIComponent(String(leaveRequestId !== undefined ? leaveRequestId : `-leaveRequestId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leaveRequestsApproveDenyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/leaveRequests/{leaveRequestId}/approvals',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leaveRequestsApproveDenyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request to cancel a single Leave Request by its unique identifier
         * @summary Request to cancel a leave request
         * @param {string} leaveRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelRequest: async (leaveRequestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaveRequestId' is not null or undefined
            assertParamExists('cancelRequest', 'leaveRequestId', leaveRequestId)
            const localVarPath = `/api/v3/leaveRequests/{leaveRequestId}`
                .replace(`{${"leaveRequestId"}}`, encodeURIComponent(String(leaveRequestId !== undefined ? leaveRequestId : `-leaveRequestId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/leaveRequests/{leaveRequestId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single Leave Request by its unique identifier
         * @summary Get a leave request by id
         * @param {string} leaveRequestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (leaveRequestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaveRequestId' is not null or undefined
            assertParamExists('getById', 'leaveRequestId', leaveRequestId)
            const localVarPath = `/api/v3/leaveRequests/{leaveRequestId}`
                .replace(`{${"leaveRequestId"}}`, encodeURIComponent(String(leaveRequestId !== undefined ? leaveRequestId : `-leaveRequestId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/leaveRequests/{leaveRequestId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of Leave Requests
         * @summary List leave requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/leaveRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/leaveRequests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeaveRequestsApi - functional programming interface
 * @export
 */
export const LeaveRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeaveRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * Approve or deny a single Leave Request by its unique identifier  Only the Leave Requests pending approval can be approved or denied.  A comment is required to deny a Leave Request. 
         * @summary Approve or deny a leave request
         * @param {LeaveRequestsApiApproveDenyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveDeny(requestParameters: LeaveRequestsApiApproveDenyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const leaveRequestsApproveDenyRequest: LeaveRequestsApproveDenyRequest = {
                approved: requestParameters.approved,
                comment: requestParameters.comment
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveDeny(requestParameters.leaveRequestId, leaveRequestsApproveDenyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request to cancel a single Leave Request by its unique identifier
         * @summary Request to cancel a leave request
         * @param {LeaveRequestsApiCancelRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelRequest(requestParameters: LeaveRequestsApiCancelRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelRequest(requestParameters.leaveRequestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single Leave Request by its unique identifier
         * @summary Get a leave request by id
         * @param {LeaveRequestsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: LeaveRequestsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveRequestsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.leaveRequestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of Leave Requests
         * @summary List leave requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveRequestsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeaveRequestsApi - factory interface
 * @export
 */
export const LeaveRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeaveRequestsApiFp(configuration)
    return {
        /**
         * Approve or deny a single Leave Request by its unique identifier  Only the Leave Requests pending approval can be approved or denied.  A comment is required to deny a Leave Request. 
         * @summary Approve or deny a leave request
         * @param {LeaveRequestsApiApproveDenyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveDeny(requestParameters: LeaveRequestsApiApproveDenyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approveDeny(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Request to cancel a single Leave Request by its unique identifier
         * @summary Request to cancel a leave request
         * @param {LeaveRequestsApiCancelRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelRequest(requestParameters: LeaveRequestsApiCancelRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single Leave Request by its unique identifier
         * @summary Get a leave request by id
         * @param {LeaveRequestsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: LeaveRequestsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveRequestsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of Leave Requests
         * @summary List leave requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<LeaveRequestsListResponse> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveDeny operation in LeaveRequestsApi.
 * @export
 * @interface LeaveRequestsApiApproveDenyRequest
 */
export type LeaveRequestsApiApproveDenyRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LeaveRequestsApiApproveDeny
    */
    readonly leaveRequestId: string
    
} & LeaveRequestsApproveDenyRequest

/**
 * Request parameters for cancelRequest operation in LeaveRequestsApi.
 * @export
 * @interface LeaveRequestsApiCancelRequestRequest
 */
export type LeaveRequestsApiCancelRequestRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LeaveRequestsApiCancelRequest
    */
    readonly leaveRequestId: string
    
}

/**
 * Request parameters for getById operation in LeaveRequestsApi.
 * @export
 * @interface LeaveRequestsApiGetByIdRequest
 */
export type LeaveRequestsApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LeaveRequestsApiGetById
    */
    readonly leaveRequestId: string
    
}

/**
 * LeaveRequestsApiGenerated - object-oriented interface
 * @export
 * @class LeaveRequestsApiGenerated
 * @extends {BaseAPI}
 */
export class LeaveRequestsApiGenerated extends BaseAPI {
    /**
     * Approve or deny a single Leave Request by its unique identifier  Only the Leave Requests pending approval can be approved or denied.  A comment is required to deny a Leave Request. 
     * @summary Approve or deny a leave request
     * @param {LeaveRequestsApiApproveDenyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveRequestsApiGenerated
     */
    public approveDeny(requestParameters: LeaveRequestsApiApproveDenyRequest, options?: AxiosRequestConfig) {
        return LeaveRequestsApiFp(this.configuration).approveDeny(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request to cancel a single Leave Request by its unique identifier
     * @summary Request to cancel a leave request
     * @param {LeaveRequestsApiCancelRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveRequestsApiGenerated
     */
    public cancelRequest(requestParameters: LeaveRequestsApiCancelRequestRequest, options?: AxiosRequestConfig) {
        return LeaveRequestsApiFp(this.configuration).cancelRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single Leave Request by its unique identifier
     * @summary Get a leave request by id
     * @param {LeaveRequestsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveRequestsApiGenerated
     */
    public getById(requestParameters: LeaveRequestsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return LeaveRequestsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of Leave Requests
     * @summary List leave requests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaveRequestsApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return LeaveRequestsApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }
}
