/* tslint:disable */
/* eslint-disable */
/*
Timmi Absences API

Welcome on the documentation for Timmi Absences API.

The version of the OpenAPI document: 1.0
Contact: developers@lucca.fr

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LeavesGetApprovedListResponse } from '../models';
// @ts-ignore
import { LeavesGetByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LeavesApi - axios parameter creator
 * @export
 */
export const LeavesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel a single Leave by its unique identifier.
         * @summary Cancellation of a leave
         * @param {string} leaveId Identifier of the leave.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelLeaveById: async (leaveId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaveId' is not null or undefined
            assertParamExists('cancelLeaveById', 'leaveId', leaveId)
            const localVarPath = `/api/v3/leaves/{leaveId}`
                .replace(`{${"leaveId"}}`, encodeURIComponent(String(leaveId !== undefined ? leaveId : `-leaveId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/leaves/{leaveId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of approved leaves for one or several users on a given period.  The `leavePeriod.ownerId` query parameter is required ans is used to:   - retrieve Leaves of a specific user: `?leavePeriod.ownerId=5` - retrieve Leaves of several users: `?leavePeriod.ownerId=5,6` - retrieve Leaves of a specific group of users: `?leavePeriod.owner.departmentId=3`  The `date` query parameter can operate comparisons with a given date-time value:  - `?date=2021-01-01`: strict equality. - `?date=since,2021-01-01`: greater than or equal. - `?date=until,2021-01-01`: lower than or equal. - `?date=between,2021-01-01,2021-01-31`: comprised between two dates.
         * @summary List leaves
         * @param {string} paging {offset},{limit}. Defaults to 0,1000.
         * @param {Array<any>} leavePeriodOwnerId Employee\&#39;s identifier
         * @param {string} date {comparator},{date-time}
         * @param {string} [leaveAccountId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedList: async (paging: string, leavePeriodOwnerId: Array<any>, date: string, leaveAccountId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paging' is not null or undefined
            assertParamExists('getApprovedList', 'paging', paging)
            // verify required parameter 'leavePeriodOwnerId' is not null or undefined
            assertParamExists('getApprovedList', 'leavePeriodOwnerId', leavePeriodOwnerId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getApprovedList', 'date', date)
            const localVarPath = `/api/v3/leaves`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })
            if (paging !== undefined) {
                localVarQueryParameter['paging'] = paging;
            }

            if (leaveAccountId !== undefined) {
                localVarQueryParameter['leaveAccountId'] = leaveAccountId;
            }

            if (leavePeriodOwnerId) {
                localVarQueryParameter['leavePeriod.ownerId'] = leavePeriodOwnerId;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/leaves',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single Leave by its unique identifier.
         * @summary Get a leave by id
         * @param {string} leaveId Identifier of the leave.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (leaveId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaveId' is not null or undefined
            assertParamExists('getById', 'leaveId', leaveId)
            const localVarPath = `/api/v3/leaves/{leaveId}`
                .replace(`{${"leaveId"}}`, encodeURIComponent(String(leaveId !== undefined ? leaveId : `-leaveId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/leaves/{leaveId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeavesApi - functional programming interface
 * @export
 */
export const LeavesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeavesApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel a single Leave by its unique identifier.
         * @summary Cancellation of a leave
         * @param {LeavesApiCancelLeaveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelLeaveById(requestParameters: LeavesApiCancelLeaveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelLeaveById(requestParameters.leaveId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of approved leaves for one or several users on a given period.  The `leavePeriod.ownerId` query parameter is required ans is used to:   - retrieve Leaves of a specific user: `?leavePeriod.ownerId=5` - retrieve Leaves of several users: `?leavePeriod.ownerId=5,6` - retrieve Leaves of a specific group of users: `?leavePeriod.owner.departmentId=3`  The `date` query parameter can operate comparisons with a given date-time value:  - `?date=2021-01-01`: strict equality. - `?date=since,2021-01-01`: greater than or equal. - `?date=until,2021-01-01`: lower than or equal. - `?date=between,2021-01-01,2021-01-31`: comprised between two dates.
         * @summary List leaves
         * @param {LeavesApiGetApprovedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApprovedList(requestParameters: LeavesApiGetApprovedListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeavesGetApprovedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApprovedList(requestParameters.paging, requestParameters.leavePeriodOwnerId, requestParameters.date, requestParameters.leaveAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single Leave by its unique identifier.
         * @summary Get a leave by id
         * @param {LeavesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: LeavesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeavesGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.leaveId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeavesApi - factory interface
 * @export
 */
export const LeavesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeavesApiFp(configuration)
    return {
        /**
         * Cancel a single Leave by its unique identifier.
         * @summary Cancellation of a leave
         * @param {LeavesApiCancelLeaveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelLeaveById(requestParameters: LeavesApiCancelLeaveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelLeaveById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of approved leaves for one or several users on a given period.  The `leavePeriod.ownerId` query parameter is required ans is used to:   - retrieve Leaves of a specific user: `?leavePeriod.ownerId=5` - retrieve Leaves of several users: `?leavePeriod.ownerId=5,6` - retrieve Leaves of a specific group of users: `?leavePeriod.owner.departmentId=3`  The `date` query parameter can operate comparisons with a given date-time value:  - `?date=2021-01-01`: strict equality. - `?date=since,2021-01-01`: greater than or equal. - `?date=until,2021-01-01`: lower than or equal. - `?date=between,2021-01-01,2021-01-31`: comprised between two dates.
         * @summary List leaves
         * @param {LeavesApiGetApprovedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedList(requestParameters: LeavesApiGetApprovedListRequest, options?: AxiosRequestConfig): AxiosPromise<LeavesGetApprovedListResponse> {
            return localVarFp.getApprovedList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single Leave by its unique identifier.
         * @summary Get a leave by id
         * @param {LeavesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: LeavesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<LeavesGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelLeaveById operation in LeavesApi.
 * @export
 * @interface LeavesApiCancelLeaveByIdRequest
 */
export type LeavesApiCancelLeaveByIdRequest = {
    
    /**
    * Identifier of the leave.
    * @type {string}
    * @memberof LeavesApiCancelLeaveById
    */
    readonly leaveId: string
    
}

/**
 * Request parameters for getApprovedList operation in LeavesApi.
 * @export
 * @interface LeavesApiGetApprovedListRequest
 */
export type LeavesApiGetApprovedListRequest = {
    
    /**
    * {offset},{limit}. Defaults to 0,1000.
    * @type {string}
    * @memberof LeavesApiGetApprovedList
    */
    readonly paging: string
    
    /**
    * Employee\'s identifier
    * @type {Array<any>}
    * @memberof LeavesApiGetApprovedList
    */
    readonly leavePeriodOwnerId: Array<any>
    
    /**
    * {comparator},{date-time}
    * @type {string}
    * @memberof LeavesApiGetApprovedList
    */
    readonly date: string
    
    /**
    * 
    * @type {string}
    * @memberof LeavesApiGetApprovedList
    */
    readonly leaveAccountId?: string
    
}

/**
 * Request parameters for getById operation in LeavesApi.
 * @export
 * @interface LeavesApiGetByIdRequest
 */
export type LeavesApiGetByIdRequest = {
    
    /**
    * Identifier of the leave.
    * @type {string}
    * @memberof LeavesApiGetById
    */
    readonly leaveId: string
    
}

/**
 * LeavesApiGenerated - object-oriented interface
 * @export
 * @class LeavesApiGenerated
 * @extends {BaseAPI}
 */
export class LeavesApiGenerated extends BaseAPI {
    /**
     * Cancel a single Leave by its unique identifier.
     * @summary Cancellation of a leave
     * @param {LeavesApiCancelLeaveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeavesApiGenerated
     */
    public cancelLeaveById(requestParameters: LeavesApiCancelLeaveByIdRequest, options?: AxiosRequestConfig) {
        return LeavesApiFp(this.configuration).cancelLeaveById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of approved leaves for one or several users on a given period.  The `leavePeriod.ownerId` query parameter is required ans is used to:   - retrieve Leaves of a specific user: `?leavePeriod.ownerId=5` - retrieve Leaves of several users: `?leavePeriod.ownerId=5,6` - retrieve Leaves of a specific group of users: `?leavePeriod.owner.departmentId=3`  The `date` query parameter can operate comparisons with a given date-time value:  - `?date=2021-01-01`: strict equality. - `?date=since,2021-01-01`: greater than or equal. - `?date=until,2021-01-01`: lower than or equal. - `?date=between,2021-01-01,2021-01-31`: comprised between two dates.
     * @summary List leaves
     * @param {LeavesApiGetApprovedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeavesApiGenerated
     */
    public getApprovedList(requestParameters: LeavesApiGetApprovedListRequest, options?: AxiosRequestConfig) {
        return LeavesApiFp(this.configuration).getApprovedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single Leave by its unique identifier.
     * @summary Get a leave by id
     * @param {LeavesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeavesApiGenerated
     */
    public getById(requestParameters: LeavesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return LeavesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
